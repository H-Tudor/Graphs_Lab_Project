private int Degree(Node node) {
	int index = nodes.IndexOf(node);
	int degree = 0;

	for(int i = 0; i < nodes.Count; i++) {
		degree += adjacency_matrix[index, i];
	}

	return degree;
}

public bool IsHamiltonian() {
	if(NodesCount <= 2)
		return false;

	foreach(Node node in nodes) {
		if(Degree(node) < nodes.Count / 2)
			return false;
	}

	bool[] visited = new bool[nodes.Count];
	Stack<int> stack = new Stack<int>();
	stack.Push(0);
	visited[0] = true;

	while(stack.Count > 0) {
		int currentNode = stack.Pop();

		for(int neighbor = 0; neighbor < nodes.Count; neighbor++) {
			if(adjacency_matrix[currentNode, neighbor] == 1 && !visited[neighbor]) {
				stack.Push(neighbor);
				visited[neighbor] = true;
			}
		}
	}

	if(Array.TrueForAll(visited, v => v) != true)
		return false;

	int isolated_nodes = 0;
	foreach(Node node in nodes) {
		if(Degree(node) == 0)
			isolated_nodes++;
	}

	if(isolated_nodes != 0)
		return false;

	return true;
}