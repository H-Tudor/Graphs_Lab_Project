private int NodeToIndex(Node? start_node = null, int start_node_id = -1) {
	if(start_node != null) {
		if(nodes.Contains(start_node) == false) {
			throw new Exception($"Node {start_node} is not a know node of graph {this}");
		}

		start_node_id = nodes.IndexOf(start_node);
	} else if(start_node_id == -1) {
		throw new Exception("Neither Current node or start_node_id provided");
	}

	return start_node_id;
}

public void Start_DepthFirstSearch(Node? start_node = null, int start_node_id = -1, bool recursive = false, bool debug = false) {
	start_node_id = NodeToIndex(start_node, start_node_id);

	if(debug)
		Console.WriteLine($"\nDepth First Search: start from {start_node_id}");

	visited = new bool[NodesCount];

	if(recursive)
		DepthFirstSearch_Recursive_AdjacencyMatrix(start_node_id, debug);
	else
		DepthFirstSearch_Stack_AdjacencyMatrix(start_node_id, debug);

	Console.WriteLine();
	visited = new bool[NodesCount];
}

private void DepthFirstSearch_Recursive_AdjacencyMatrix(int start_node_id, bool debug = false) {
	if(visited[start_node_id] == true)
		return;

	if(debug)
		Console.Write($"{start_node_id} ");

	visited[start_node_id] = true;
	for(int j = 0; j < NodesCount; j++) {
		if(j == start_node_id)
			continue;

		if(adjacency_matrix[start_node_id, j] != 0)
			DepthFirstSearch_Recursive_AdjacencyMatrix(start_node_id: j, debug: debug);
	}
}

private void DepthFirstSearch_Stack_AdjacencyMatrix(int start_node_id, bool debug = false) {
	Stack<int> stack = new Stack<int>();
	stack.Push(start_node_id);
	visited[start_node_id] = true;

	while(stack.Count() > 0) {
		int currentNode = stack.Pop();

		for(int neighbor = 0; neighbor < NodesCount; neighbor++) {
			if(adjacency_matrix[currentNode, neighbor] == 1 && !visited[neighbor]) {
				stack.Push(neighbor);
				visited[neighbor] = true;
			}
		}
	}
}

private void DepthFirstSearch_Stack_EdgeList(int start_node_id, bool debug = false) {
	Stack<int> stack = new Stack<int>();
	stack.Push(start_node_id);
	visited[start_node_id] = true;

	int current, next;
	bool check_1, check_2;

	while(stack.Count() > 0) {
		current = stack.Pop();

		if(debug)
			Console.Write($"{current} ");

		foreach(int[] edge in edge_list) {
			if(edge[2] == 0 || (edge[0] != current && edge[1] != current))
				continue;

			check_1 = edge[0] == current && visited[edge[1]] == false;
			check_2 = edge[1] == current && visited[edge[0]] == false;

			if(check_1) {
				next = edge[1];
			} else if(check_2) {
				next = edge[0];
			} else {
				continue;
			}

			visited[next] = true;
			stack.Push(next);
		}
	}
}

private void DepthFirstSearch_Stack_EdgeDict(int start_node_id, bool debug = false) {
	Stack<int> stack = new Stack<int>();
	stack.Push(start_node_id);
	visited[start_node_id] = true;

	int current;

	while(stack.Count() > 0) {
		current = stack.Pop();

		if(debug)
			Console.Write($"{current} ");

		foreach(int[] edge in edge_dict[current]) {
			visited[edge[0]] = true;
			stack.Push(edge[0]);
		}
	}
}